/**
 * ============================================[ üì¢YOUTUBE DOWNLOADER CORE <( YT-CORE )/>üìπ ]====================================
 * üöÄ Unlock effortless audio/video downloads with YT-CORE‚Äîa command-line, Node.js, and streaming powerhouse.
 * üéµ Meticulously designed for enthusiasts, YT-CORE stands out as a feature-rich package, evolving with state-of-the-art
 * üî• functionalities from Youtube-DL and Python yt-core.
 * üöÄ Elevate your media experience!
 * üåà Dive into the world of limitless possibilities.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 * MIT License
 * Original Library
 * - Copyright (c) Shovit Dutta <shovitdutta1@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 */
import { Readable } from 'stream';

declare function help(): Promise<string>;

declare function search({ query }: {
    query: string;
}): Promise<string | {
    message: string;
    status: number;
} | null>;

declare function extract({ query }: {
    query: string;
}): Promise<any>;

interface get_playlistOC {
    playlistUrls: string[];
}
declare function get_playlist({ playlistUrls, }: get_playlistOC): Promise<any>;

declare function list_formats({ query, }: {
    query: string;
}): Promise<any>;

interface VideoData {
    id: string;
    original_url: string;
    webpage_url: string;
    title: string;
    view_count: number;
    like_count: number;
    view_count_formatted: string;
    like_count_formatted: string;
    uploader: string;
    uploader_id: string;
    uploader_url: string;
    thumbnail: string;
    categories: string[];
    time: number;
    duration: VideoDuration;
    age_limit: number;
    live_status: string;
    description: string;
    full_description: string;
    upload_date: string;
    upload_ago: number;
    upload_ago_formatted: UploadAgoObject;
    comment_count: number;
    comment_count_formatted: string;
    channel_id: string;
    channel_name: string;
    channel_url: string;
    channel_follower_count: number;
    channel_follower_count_formatted: string;
}
interface VideoDuration {
    hours: number;
    minutes: number;
    seconds: number;
    formatted: string;
}
interface UploadAgoObject {
    years: number;
    months: number;
    days: number;
    formatted: string;
}
declare function get_video_data({ query, }: {
    query: string;
}): Promise<VideoData>;

interface extract_playlist_videosOC {
    playlistUrls: string[];
}
declare function extract_playlist_videos({ playlistUrls, }: extract_playlist_videosOC): Promise<any>;

/**
 * ============================================[ üì¢YOUTUBE DOWNLOADER CORE <( YT-CORE )/>üìπ ]====================================
 * üöÄ Unlock effortless audio/video downloads with YT-CORE‚Äîa command-line, Node.js, and streaming powerhouse.
 * üéµ Meticulously designed for enthusiasts, YT-CORE stands ipop as a feature-rich package, evolving with state-of-the-art
 * üî• functionalities from Youtube-DL and Python yt-core.
 * üöÄ Elevate your media experience!
 * üåà Dive into the world of limitless possibilities.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 * MIT License
 * Original Library
 * - Copyright (c) Shovit Dutta <shovitdutta1@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 */
interface AudioFilters {
    bassboost: string;
    echo: string;
    flanger: string;
    nightcore: string;
    panning: string;
    phaser: string;
    reverse: string;
    slow: string;
    speed: string;
    subboost: string;
    superslow: string;
    superspeed: string;
    surround: string;
    vaporwave: string;
    vibrato: string;
}

type AudioFormat$5 = "mp3" | "ogg" | "flac" | "aiff";
interface AudioLowestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    outputFormat?: AudioFormat$5;
    filter?: keyof AudioFilters;
}
type ResultConfig$f = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type AudioLowestType = ResultConfig$f;
declare function AudioLowest({ query, filter, stream, verbose, folderName, outputFormat, }: AudioLowestOC): Promise<ResultConfig$f>;

type AudioFormat$4 = "mp3" | "ogg" | "flac" | "aiff";
interface AudioHighestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    outputFormat?: AudioFormat$4;
    filter?: keyof AudioFilters;
}
type ResultConfig$e = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type AudioHighestType = ResultConfig$e;
declare function AudioHighest({ query, filter, stream, verbose, folderName, outputFormat, }: AudioHighestOC): Promise<ResultConfig$e>;

/**
 * ============================================[ üì¢YOUTUBE DOWNLOADER CORE <( YT-CORE )/>üìπ ]====================================
 * üöÄ Unlock effortless audio/video downloads with YT-CORE‚Äîa command-line, Node.js, and streaming powerhouse.
 * üéµ Meticulously designed for enthusiasts, YT-CORE stands ipop as a feature-rich package, evolving with state-of-the-art
 * üî• functionalities from Youtube-DL and Python yt-core.
 * üöÄ Elevate your media experience!
 * üåà Dive into the world of limitless possibilities.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 * MIT License
 * Original Library
 * - Copyright (c) Shovit Dutta <shovitdutta1@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 */
interface VideoFilters {
    grayscale: string;
    invert: string;
    rotate90: string;
    rotate180: string;
    rotate270: string;
    flipHorizontal: string;
    flipVertical: string;
}

type VideoFormat$9 = "mp4" | "avi" | "mov";
interface VideoLowestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    filter?: keyof VideoFilters;
    outputFormat?: VideoFormat$9;
}
type ResultConfig$d = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type VideoLowestType = ResultConfig$d;
declare function VideoLowest({ query, filter, stream, verbose, folderName, outputFormat, }: VideoLowestOC): Promise<ResultConfig$d>;

type VideoFormat$8 = "mp4" | "avi" | "mov";
interface VideoHighestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    outputFormat?: VideoFormat$8;
    filter?: keyof VideoFilters;
}
type ResultConfig$c = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type VideoHighestType = ResultConfig$c;
declare function VideoHighest({ query, filter, stream, verbose, folderName, outputFormat, }: VideoHighestOC): Promise<ResultConfig$c>;

type VideoFormat$7 = "mp4" | "avi" | "mov";
interface AudioVideoLowestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    outputFormat?: VideoFormat$7;
}
type ResultConfig$b = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type AudioVideoLowestType = ResultConfig$b;
declare function AudioVideoLowest({ query, stream, verbose, folderName, outputFormat, }: AudioVideoLowestOC): Promise<ResultConfig$b>;

type VideoFormat$6 = "mp4" | "avi" | "mov";
interface AudioVideoHighestOC {
    query: string;
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    outputFormat?: VideoFormat$6;
}
type ResultConfig$a = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type AudioVideoHighestType = ResultConfig$a;
declare function AudioVideoHighest({ query, stream, verbose, folderName, outputFormat, }: AudioVideoHighestOC): Promise<ResultConfig$a>;

type AudioFormat$3 = "mp3" | "ogg" | "flac" | "aiff";
type AudioQualities$1 = "high" | "medium" | "low" | "ultralow";
interface AudioQualityCustomOC {
    query: string;
    stream?: boolean;
    folderName?: string;
    quality: AudioQualities$1;
    outputFormat?: AudioFormat$3;
    filter?: keyof AudioFilters;
}
type ResultConfig$9 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type AudioQualityCustomType = ResultConfig$9;
declare function AudioQualityCustom({ query, filter, quality, stream, folderName, outputFormat, }: AudioQualityCustomOC): Promise<ResultConfig$9>;

type VideoFormat$5 = "mp4" | "avi" | "mov";
type VideoQualities$1 = "144p" | "240p" | "360p" | "480p" | "720p" | "1080p" | "1440p" | "2160p" | "2880p" | "4320p" | "5760p" | "8640p" | "12000p";
interface VideoQualityCustomOC {
    query: string;
    stream?: boolean;
    folderName?: string;
    quality: VideoQualities$1;
    outputFormat?: VideoFormat$5;
    filter?: keyof VideoFilters;
}
type ResultConfig$8 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type VideoQualityCustomType = ResultConfig$8;
declare function VideoQualityCustom({ query, filter, quality, stream, folderName, outputFormat, }: VideoQualityCustomOC): Promise<ResultConfig$8>;

type VideoFormat$4 = "mp4" | "avi" | "mov";
interface ListVideoLowestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: VideoFormat$4;
    filter?: keyof VideoFilters;
}
type ResultConfig$7 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListVideoLowestType = ResultConfig$7;
declare function ListVideoLowest({ filter, stream, verbose, folderName, playlistUrls, outputFormat, }: ListVideoLowestOC): Promise<ListVideoLowestType[]>;

type VideoFormat$3 = "mp4" | "avi" | "mov";
interface ListVideoHighestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: VideoFormat$3;
    filter?: keyof VideoFilters;
}
type ResultConfig$6 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListVideoHighestType = ResultConfig$6;
declare function ListVideoHighest({ filter, stream, verbose, folderName, playlistUrls, outputFormat, }: ListVideoHighestOC): Promise<ListVideoHighestType[]>;

type VideoFormat$2 = "mp4" | "avi" | "mov";
type VideoQualities = "144p" | "240p" | "360p" | "480p" | "720p" | "1080p" | "1440p" | "2160p" | "2880p" | "4320p" | "5760p" | "8640p" | "12000p";
interface ListVideoQualityCustomOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    quality: VideoQualities;
    outputFormat?: VideoFormat$2;
    filter?: keyof VideoFilters;
}
type ResultConfig$5 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListVideoQualityCustomType = ResultConfig$5;
declare function ListVideoQualityCustom({ filter, stream, quality, verbose, folderName, playlistUrls, outputFormat, }: ListVideoQualityCustomOC): Promise<ListVideoQualityCustomType[]>;

type AudioFormat$2 = "mp3" | "ogg" | "flac" | "aiff";
interface ListAudioLowestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: AudioFormat$2;
    filter?: keyof AudioFilters;
}
type ResultConfig$4 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListAudioLowestType = ResultConfig$4;
declare function ListAudioLowest({ filter, stream, verbose, folderName, playlistUrls, outputFormat, }: ListAudioLowestOC): Promise<ListAudioLowestType[]>;

type AudioFormat$1 = "mp3" | "ogg" | "flac" | "aiff";
interface ListAudioHighestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: AudioFormat$1;
    filter?: keyof AudioFilters;
}
type ResultConfig$3 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListAudioHighestType = ResultConfig$3;
declare function ListAudioHighest({ filter, stream, verbose, folderName, playlistUrls, outputFormat, }: ListAudioHighestOC): Promise<ListAudioHighestType[]>;

type AudioFormat = "mp3" | "ogg" | "flac" | "aiff";
type AudioQualities = "high" | "medium" | "low" | "ultralow";
interface ListAudioQualityCustomOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    quality: AudioQualities;
    outputFormat?: AudioFormat;
    filter?: keyof AudioFilters;
}
type ResultConfig$2 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListAudioQualityCustomType = ResultConfig$2;
declare function ListAudioQualityCustom({ filter, stream, quality, verbose, folderName, playlistUrls, outputFormat, }: ListAudioQualityCustomOC): Promise<ListAudioQualityCustomType[]>;

type VideoFormat$1 = "mp4" | "avi" | "mov";
interface ListAudioVideoLowestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: VideoFormat$1;
}
type ResultConfig$1 = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListAudioVideoLowestType = ResultConfig$1;
declare function ListAudioVideoLowest({ stream, verbose, folderName, playlistUrls, outputFormat, }: ListAudioVideoLowestOC): Promise<ListAudioVideoLowestType[]>;

type VideoFormat = "mp4" | "avi" | "mov";
interface ListAudioVideoHighestOC {
    stream?: boolean;
    verbose?: boolean;
    folderName?: string;
    playlistUrls: string[];
    outputFormat?: VideoFormat;
}
type ResultConfig = {
    status: number;
} | {
    message: string;
    status: number;
} | {
    stream: Readable;
    filename: string;
};
type ListAudioVideoHighestType = ResultConfig;
declare function ListAudioVideoHighest({ stream, verbose, folderName, playlistUrls, outputFormat, }: ListAudioVideoHighestOC): Promise<ListAudioVideoHighestType[]>;

declare const ytCore: {
    info: {
        help: typeof help;
        extract: typeof extract;
        search: typeof search;
        list_formats: typeof list_formats;
        get_playlist: typeof get_playlist;
        get_video_data: typeof get_video_data;
        extract_playlist_videos: typeof extract_playlist_videos;
    };
    audio: {
        single: {
            lowest: typeof AudioLowest;
            highest: typeof AudioHighest;
            custom: typeof AudioQualityCustom;
        };
        playlist: {
            lowest: typeof ListAudioLowest;
            highest: typeof ListAudioHighest;
            custom: typeof ListAudioQualityCustom;
        };
    };
    video: {
        single: {
            lowest: typeof VideoLowest;
            highest: typeof VideoHighest;
            custom: typeof VideoQualityCustom;
        };
        playlist: {
            lowest: typeof ListVideoLowest;
            highest: typeof ListVideoHighest;
            custom: typeof ListVideoQualityCustom;
        };
    };
    audio_video: {
        single: {
            lowest: typeof AudioVideoLowest;
            highest: typeof AudioVideoHighest;
        };
        playlist: {
            lowest: typeof ListAudioVideoLowest;
            highest: typeof ListAudioVideoHighest;
        };
    };
};

export { type AudioHighestType, type AudioLowestType, type AudioQualityCustomType, type AudioVideoHighestType, type AudioVideoLowestType, type ListAudioHighestType, type ListAudioLowestType, type ListAudioQualityCustomType, type ListAudioVideoHighestType, type ListAudioVideoLowestType, type ListVideoHighestType, type ListVideoLowestType, type ListVideoQualityCustomType, type VideoHighestType, type VideoLowestType, type VideoQualityCustomType, ytCore as default };
/**
 * ============================================[ üì¢YOUTUBE DOWNLOADER CORE <( YT-CORE )/>üìπ ]====================================
 * üöÄ Unlock effortless audio/video downloads with YT-CORE‚Äîa command-line, Node.js, and streaming powerhouse.
 * üéµ Meticulously designed for enthusiasts, YT-CORE stands out as a feature-rich package, evolving with state-of-the-art
 * üî• functionalities from Youtube-DL and Python yt-core.
 * üöÄ Elevate your media experience!
 * üåà Dive into the world of limitless possibilities.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 * MIT License
 * Original Library
 * - Copyright (c) Shovit Dutta <shovitdutta1@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * ============================================[ üö®License: MIT] [ üßôüèªOwner: ShovitDutta]====================================
 */
